/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Integers, IntegersInterface } from "../Integers";

const _abi = [
  {
    inputs: [],
    name: "getnumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526103e86000557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67698060015561271060025534801561004057600080fd5b5060b78061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063486b721714602d575b600080fd5b60336047565b604051603e91906068565b60405180910390f35b6000600254905090565b6000819050919050565b6062816051565b82525050565b6000602082019050607b6000830184605b565b9291505056fea26469706673582212200f8df68e0ca30f9e49b30e6d64f8b9a1d762a64b323b1dce956a6ef1a968376f64736f6c63430008120033";

type IntegersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntegersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Integers__factory extends ContractFactory {
  constructor(...args: IntegersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Integers> {
    return super.deploy(overrides || {}) as Promise<Integers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Integers {
    return super.attach(address) as Integers;
  }
  override connect(signer: Signer): Integers__factory {
    return super.connect(signer) as Integers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntegersInterface {
    return new utils.Interface(_abi) as IntegersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Integers {
    return new Contract(address, _abi, signerOrProvider) as Integers;
  }
}
